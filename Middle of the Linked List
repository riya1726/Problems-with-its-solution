https://leetcode.com/problems/middle-of-the-linked-list/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode temp = head;
        int c = 0;
        while(temp != null) {
            c++;
            temp = temp.next;
        }
        temp = head;
        int i = 0;
        while(i != c/2) {
            temp = temp.next;
            i++;
        }
        return temp;
    }
}



Secong approach - 

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        while(fast != null) {
            if(fast.next == null) {
                fast = fast.next;
            }
            else{
                fast = fast.next.next;
                slow = slow.next;
            }
        }
        return slow;
    }
}
